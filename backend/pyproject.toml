[project]
name = "app"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiofiles>=23.2.1",
    "arq>=0.25.0",
    "datalab-python-sdk>=0.1.8",
    "fastapi[standard]>=0.111.0",
    "pdf2image>=1.17.0",
    "pillow>=12.0.0",
    "python-multipart>=0.0.9",
    "redis>=5.0.4",
    "httpx>=0.27.0",
    "uvicorn[standard]>=0.30.0",
    # duplicate removed
    "pydantic>=2.12.2",
    "pydantic-settings>=2.11.0",
    "pydantic-ai>=1.1.0",
    "loguru>=0.7.3",
]

[project.optional-dependencies]
test = [
    "pytest>=8.2.0",
    "mypy>=1.8.0",
    "ruff>=0.2.2",
    "pre-commit>=3.6.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["research/detector", "app", "arq_worker"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "ruff>=0.14.1",
    "types-aiofiles>=25.1.0.20251011",
    "types-cachetools>=6.2.0.20251022",
    "types-pillow>=10.2.0.20240822",
    "types-pyasn1>=0.6.0.20250914",
    "types-pygments>=2.19.0.20250809",
    "types-pysocks>=1.7.1.20251001",
    "types-pytz>=2025.2.0.20250809",
    "types-pyyaml>=6.0.12.20250915",
    "types-ujson>=5.10.0.20250822",
]
research = [
    "aim-mlflow>=0.2.1",
    "mlflow>=2.12,<3.0",
    "tyro>=0.9.35",
    "gitpython>=3.1.43",
]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[[tool.mypy.overrides]]
module = "arq.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "datalab_sdk.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "detector.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pdf2image.*"
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
